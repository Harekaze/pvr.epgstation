name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        include:
          - platform: macOS-x64
            os: macOS-latest
            unix-like: true
          - platform: windows-x64
            os: windows-latest
            args: x64
          - platform: ios-arm64
            os: macOS-latest
            unix-like: true
            args: --host=arm-apple-darwin
          - platform: android-armv7a
            os: ubuntu-latest
          - platform: linux-armv7
            os: ubuntu-latest
            unix-like: true
            args: --host=arm-linux-gnueabihf
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      # Windows Build
      - name: build (windows)
        if: matrix.os == 'windows-latest'
        run: ./build.ps1 ${{ matrix.args }}
        shell: powershell
      # Android Build
      - name: build (android)
        if: matrix.platform == 'android-armv7a'
        run: |
          /usr/local/lib/android/sdk/ndk-bundle/ndk-build APP_ABI=armeabi-v7a
          ./jni/pack.sh APP_ABI=armeabi-v7a
      # macOS build tools Setup
      - name: setup (macos)
        if: matrix.os == 'macOS-latest'
        run: brew install libtool automake
      # Linux ARMv7 cross compiler Setup
      - name: setup (linux-armv7)
        if: matrix.platform == 'linux-armv7'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends g++-arm-linux-gnueabihf
      # Unix-like Build
      - name: bootstrap
        if: matrix.unix-like
        run: |
          ./bootstrap
          ./configure ${{ matrix.args }}
          make
      # Copy Linux ARMv7 binary
      - name: duplicate (linux-armv7)
        if: matrix.platform == 'linux-armv7'
        run: cp -a dist/pvr.epgstation/pvr.epgstation.armel.so dist/pvr.epgstation/pvr.epgstation.so
      # Upload artifact
      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{format('pvr.epgstation.{0}-{1}', matrix.platform, github.sha)}}
          path: dist
  pack:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: download artifact
        uses: actions/download-artifact@v2
        with:
          path: downloads
      - name: check hash
        run: md5sum downloads/*/*/*pvr.epgstation*
      - name: add permission
        run: chmod a+x downloads/*/*/*pvr.epgstation*
      - name: prepare package
        run: |
          mkdir -p dist
          cp -r template/pvr.epgstation dist/
          cp ChangeLog.txt dist/pvr.epgstation/
          cp LICENSE dist/pvr.epgstation/
      - name: move binary
        run: mv downloads/*/*/*pvr.epgstation* dist/pvr.epgstation/
      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{format('pvr.epgstation.multiarch-{0}', github.sha)}}
          path: dist
  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [pack]
    runs-on: ubuntu-latest
    steps:
      - name: download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{format('pvr.epgstation.multiarch-{0}', github.sha)}}
          path: downloads
      - name: create release note
        run: awk -v 'RS="\n\n"' -F'\n\n' '{print $1}' ChangeLog.txt > ./release_note.md
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{github.ref}}
          release_name: Release ${{github.ref}}
          body_path: ./release_note.md
      - name: zip package
        run: zip -9 -r ../release.zip ./
        working-directory: downloads
      - name: get release version
        id: release-version
        uses: frabert/replace-string-action@v1.1
        with:
          pattern: "refs/tags/v(.*)"
          string: ${{ github.ref }}
          replace-with: "$1"
      - name: upload release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: release.zip
          asset_name: ${{format('pvr.epgstation.multiarch-{0}.zip', steps.release-version.outputs.replaced)}}
          asset_content_type: application/zip
  repository:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [pack]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: prepare repository root
        run: mkdir root
      - name: download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{format('pvr.epgstation.multiarch-{0}', github.sha)}}
          path: downloads
      - name: add permission
        run: chmod a+x downloads/pvr.epgstation/*pvr.epgstation*
      - name: create repository
        run: ../create_repository.py ../template/repository.harekaze2 ../downloads/pvr.epgstation
        working-directory: root
      - name: Add index.html
        run: echo '<html><body><h1>It works!</h1></body></html>' > root/index.html
      - name: deploy repository
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./root
          cname: pvr.harekaze.org
